// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Cubic,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=269,HLS_SYN_LUT=421,HLS_VERSION=2019_1}" *)

module Cubic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] sext_ln29_fu_75_p1;
reg  signed [31:0] sext_ln29_reg_162;
wire    ap_CS_fsm_state2;
wire   [31:0] y_fu_87_p2;
reg   [31:0] y_reg_170;
wire   [0:0] tmp_fu_79_p3;
wire  signed [31:0] sub_ln32_fu_99_p2;
reg  signed [31:0] sub_ln32_reg_176;
wire   [5:0] s_fu_105_p2;
reg   [5:0] s_reg_181;
wire  signed [31:0] y_1_fu_111_p2;
reg  signed [31:0] y_1_reg_186;
wire    ap_CS_fsm_state3;
wire   [31:0] mul_ln32_fu_116_p2;
reg   [31:0] mul_ln32_reg_191;
wire   [31:0] y_2_fu_143_p3;
wire    ap_CS_fsm_state4;
wire   [31:0] select_ln33_fu_149_p3;
reg  signed [5:0] s_0_reg_42;
reg   [31:0] y_0_reg_53;
reg   [31:0] p_0_reg_65;
wire   [31:0] shl_ln32_fu_93_p2;
wire   [31:0] or_ln32_1_fu_121_p2;
wire   [31:0] b_fu_126_p2;
wire   [0:0] icmp_ln33_fu_131_p2;
wire   [31:0] sub_ln35_fu_137_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_0_reg_65 <= select_ln33_fu_149_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0_reg_65 <= x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_0_reg_42 <= s_reg_181;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        s_0_reg_42 <= 6'd30;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_0_reg_53 <= y_2_fu_143_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_0_reg_53 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_79_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return <= y_0_reg_53;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln32_reg_191[31 : 1] <= mul_ln32_fu_116_p2[31 : 1];
        y_1_reg_186[31 : 1] <= y_1_fu_111_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_79_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        s_reg_181 <= s_fu_105_p2;
        sub_ln32_reg_176[31 : 1] <= sub_ln32_fu_99_p2[31 : 1];
        y_reg_170[31 : 1] <= y_fu_87_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln29_reg_162 <= sext_ln29_fu_75_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_79_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign b_fu_126_p2 = or_ln32_1_fu_121_p2 << sext_ln29_reg_162;

assign icmp_ln33_fu_131_p2 = ((p_0_reg_65 < b_fu_126_p2) ? 1'b1 : 1'b0);

assign mul_ln32_fu_116_p2 = ($signed(y_1_fu_111_p2) * $signed(sub_ln32_reg_176));

assign or_ln32_1_fu_121_p2 = (mul_ln32_reg_191 | 32'd1);

assign s_fu_105_p2 = ($signed(6'd61) + $signed(s_0_reg_42));

assign select_ln33_fu_149_p3 = ((icmp_ln33_fu_131_p2[0:0] === 1'b1) ? p_0_reg_65 : sub_ln35_fu_137_p2);

assign sext_ln29_fu_75_p1 = s_0_reg_42;

assign shl_ln32_fu_93_p2 = y_0_reg_53 << 32'd3;

assign sub_ln32_fu_99_p2 = (shl_ln32_fu_93_p2 - y_fu_87_p2);

assign sub_ln35_fu_137_p2 = (p_0_reg_65 - b_fu_126_p2);

assign tmp_fu_79_p3 = s_0_reg_42[32'd5];

assign y_1_fu_111_p2 = (y_reg_170 | 32'd1);

assign y_2_fu_143_p3 = ((icmp_ln33_fu_131_p2[0:0] === 1'b1) ? y_reg_170 : y_1_reg_186);

assign y_fu_87_p2 = y_0_reg_53 << 32'd1;

always @ (posedge ap_clk) begin
    y_reg_170[0] <= 1'b0;
    sub_ln32_reg_176[0] <= 1'b0;
    y_1_reg_186[0] <= 1'b1;
    mul_ln32_reg_191[0] <= 1'b0;
end

endmodule //Cubic
