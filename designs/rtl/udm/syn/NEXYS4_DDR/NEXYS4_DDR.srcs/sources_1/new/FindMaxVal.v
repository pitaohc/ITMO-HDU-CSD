// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FindMaxVal,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.298000,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=138,HLS_SYN_LUT=223,HLS_VERSION=2019_1}" *)

module FindMaxVal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        agg_result_max_elem,
        agg_result_max_elem_ap_vld,
        agg_result_max_index,
        agg_result_max_index_ap_vld,
        x_0,
        x_1,
        x_2,
        x_3,
        x_4,
        x_5,
        x_6,
        x_7,
        x_8,
        x_9,
        x_10,
        x_11,
        x_12,
        x_13,
        x_14,
        x_15
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] agg_result_max_elem;
output   agg_result_max_elem_ap_vld;
output  [31:0] agg_result_max_index;
output   agg_result_max_index_ap_vld;
input  [31:0] x_0;
input  [31:0] x_1;
input  [31:0] x_2;
input  [31:0] x_3;
input  [31:0] x_4;
input  [31:0] x_5;
input  [31:0] x_6;
input  [31:0] x_7;
input  [31:0] x_8;
input  [31:0] x_9;
input  [31:0] x_10;
input  [31:0] x_11;
input  [31:0] x_12;
input  [31:0] x_13;
input  [31:0] x_14;
input  [31:0] x_15;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] agg_result_max_elem_1_data_reg;
reg    agg_result_max_elem_1_vld_reg;
reg    agg_result_max_elem_1_vld_in;
reg   [31:0] agg_result_max_index_1_data_reg;
reg    agg_result_max_index_1_vld_reg;
reg    agg_result_max_index_1_vld_in;
wire   [4:0] i_fu_229_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] select_ln16_fu_283_p3;
wire   [0:0] icmp_ln15_fu_223_p2;
wire   [31:0] select_ln16_1_fu_291_p3;
reg   [31:0] ret_data_1_0_reg_180;
reg   [31:0] ret_data_0_0_reg_194;
reg   [4:0] ret_data_max_index_reg_208;
wire   [3:0] ret_data_max_elem_fu_239_p17;
wire   [31:0] ret_data_max_elem_fu_239_p18;
wire   [0:0] icmp_ln16_fu_277_p2;
wire   [31:0] zext_ln18_fu_219_p1;
wire    ap_CS_fsm_state3;
reg   [1:0] agg_result_max_elem_1_state;
reg   [1:0] agg_result_max_index_1_state;
reg    ap_block_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 agg_result_max_elem_1_data_reg = 32'd0;
#0 agg_result_max_elem_1_vld_reg = 1'b0;
#0 agg_result_max_index_1_data_reg = 32'd0;
#0 agg_result_max_index_1_vld_reg = 1'b0;
end

FindMaxVal_mux_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
FindMaxVal_mux_16bkb_U1(
    .din0(x_0),
    .din1(x_1),
    .din2(x_2),
    .din3(x_3),
    .din4(x_4),
    .din5(x_5),
    .din6(x_6),
    .din7(x_7),
    .din8(x_8),
    .din9(x_9),
    .din10(x_10),
    .din11(x_11),
    .din12(x_12),
    .din13(x_13),
    .din14(x_14),
    .din15(x_15),
    .din16(ret_data_max_elem_fu_239_p17),
    .dout(ret_data_max_elem_fu_239_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == agg_result_max_elem_1_vld_reg) & (1'b1 == agg_result_max_elem_1_vld_in))) begin
        agg_result_max_elem_1_vld_reg <= 1'b1;
    end else if (((1'b0 == agg_result_max_elem_1_vld_in) & (1'b1 == 1'b1) & (1'b1 == agg_result_max_elem_1_vld_reg))) begin
        agg_result_max_elem_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == agg_result_max_index_1_vld_reg) & (1'b1 == agg_result_max_index_1_vld_in))) begin
        agg_result_max_index_1_vld_reg <= 1'b1;
    end else if (((1'b0 == agg_result_max_index_1_vld_in) & (1'b1 == 1'b1) & (1'b1 == agg_result_max_index_1_vld_reg))) begin
        agg_result_max_index_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_223_p2 == 1'd0))) begin
        ret_data_0_0_reg_194 <= select_ln16_1_fu_291_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_data_0_0_reg_194 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_223_p2 == 1'd0))) begin
        ret_data_1_0_reg_180 <= select_ln16_fu_283_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_data_1_0_reg_180 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_223_p2 == 1'd0))) begin
        ret_data_max_index_reg_208 <= i_fu_229_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_data_max_index_reg_208 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == agg_result_max_elem_1_vld_reg) & (1'b1 == agg_result_max_elem_1_vld_in)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (1'b1 == agg_result_max_elem_1_vld_in) & (1'b1 == agg_result_max_elem_1_vld_reg)))) begin
        agg_result_max_elem_1_data_reg <= ret_data_0_0_reg_194;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == agg_result_max_index_1_vld_reg) & (1'b1 == agg_result_max_index_1_vld_in)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (1'b1 == agg_result_max_index_1_vld_in) & (1'b1 == agg_result_max_index_1_vld_reg)))) begin
        agg_result_max_index_1_data_reg <= ret_data_1_0_reg_180;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_223_p2 == 1'd1))) begin
        agg_result_max_elem_1_vld_in = 1'b1;
    end else begin
        agg_result_max_elem_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_223_p2 == 1'd1))) begin
        agg_result_max_index_1_vld_in = 1'b1;
    end else begin
        agg_result_max_index_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == agg_result_max_index_1_state) | (2'd1 == agg_result_max_elem_1_state) | ((1'b1 == 1'b0) & (2'd3 == agg_result_max_index_1_state)) | ((1'b1 == 1'b0) & (2'd3 == agg_result_max_elem_1_state))) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == agg_result_max_index_1_state) | (2'd1 == agg_result_max_elem_1_state) | ((1'b1 == 1'b0) & (2'd3 == agg_result_max_index_1_state)) | ((1'b1 == 1'b0) & (2'd3 == agg_result_max_elem_1_state))) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_223_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((2'd1 == agg_result_max_index_1_state) | (2'd1 == agg_result_max_elem_1_state) | ((1'b1 == 1'b0) & (2'd3 == agg_result_max_index_1_state)) | ((1'b1 == 1'b0) & (2'd3 == agg_result_max_elem_1_state))) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_max_elem = agg_result_max_elem_1_data_reg;

assign agg_result_max_elem_ap_vld = agg_result_max_elem_1_vld_reg;

assign agg_result_max_index = agg_result_max_index_1_data_reg;

assign agg_result_max_index_ap_vld = agg_result_max_index_1_vld_reg;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = ((2'd1 == agg_result_max_index_1_state) | (2'd1 == agg_result_max_elem_1_state) | ((1'b1 == 1'b0) & (2'd3 == agg_result_max_index_1_state)) | ((1'b1 == 1'b0) & (2'd3 == agg_result_max_elem_1_state)));
end

assign i_fu_229_p2 = (ret_data_max_index_reg_208 + 5'd1);

assign icmp_ln15_fu_223_p2 = ((ret_data_max_index_reg_208 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_277_p2 = ((ret_data_max_elem_fu_239_p18 > ret_data_0_0_reg_194) ? 1'b1 : 1'b0);

assign ret_data_max_elem_fu_239_p17 = ret_data_max_index_reg_208[3:0];

assign select_ln16_1_fu_291_p3 = ((icmp_ln16_fu_277_p2[0:0] === 1'b1) ? ret_data_max_elem_fu_239_p18 : ret_data_0_0_reg_194);

assign select_ln16_fu_283_p3 = ((icmp_ln16_fu_277_p2[0:0] === 1'b1) ? zext_ln18_fu_219_p1 : ret_data_1_0_reg_180);

assign zext_ln18_fu_219_p1 = ret_data_max_index_reg_208;

always @ (posedge ap_clk) begin
    agg_result_max_elem_1_state[1:0] <= 2'b00;
    agg_result_max_index_1_state[1:0] <= 2'b00;
end

endmodule //FindMaxVal
