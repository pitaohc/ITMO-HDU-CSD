// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Cubic.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Cubic::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Cubic::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> Cubic::ap_ST_fsm_state1 = "1";
const sc_lv<5> Cubic::ap_ST_fsm_state2 = "10";
const sc_lv<5> Cubic::ap_ST_fsm_state3 = "100";
const sc_lv<5> Cubic::ap_ST_fsm_state4 = "1000";
const sc_lv<5> Cubic::ap_ST_fsm_state5 = "10000";
const sc_lv<32> Cubic::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Cubic::ap_const_lv32_1 = "1";
const sc_lv<1> Cubic::ap_const_lv1_0 = "0";
const sc_lv<32> Cubic::ap_const_lv32_2 = "10";
const sc_lv<32> Cubic::ap_const_lv32_3 = "11";
const sc_lv<6> Cubic::ap_const_lv6_1E = "11110";
const sc_lv<32> Cubic::ap_const_lv32_5 = "101";
const sc_lv<6> Cubic::ap_const_lv6_3D = "111101";
const sc_lv<1> Cubic::ap_const_lv1_1 = "1";
const sc_lv<32> Cubic::ap_const_lv32_4 = "100";
const bool Cubic::ap_const_boolean_1 = true;

Cubic::Cubic(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_b_fu_126_p2);
    sensitive << ( sext_ln29_reg_162 );
    sensitive << ( or_ln32_1_fu_121_p2 );

    SC_METHOD(thread_icmp_ln33_fu_131_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_0_reg_65 );
    sensitive << ( b_fu_126_p2 );

    SC_METHOD(thread_mul_ln32_fu_116_p2);
    sensitive << ( sub_ln32_reg_176 );
    sensitive << ( y_1_fu_111_p2 );

    SC_METHOD(thread_or_ln32_1_fu_121_p2);
    sensitive << ( mul_ln32_reg_191 );

    SC_METHOD(thread_s_fu_105_p2);
    sensitive << ( s_0_reg_42 );

    SC_METHOD(thread_select_ln33_fu_149_p3);
    sensitive << ( p_0_reg_65 );
    sensitive << ( icmp_ln33_fu_131_p2 );
    sensitive << ( sub_ln35_fu_137_p2 );

    SC_METHOD(thread_sext_ln29_fu_75_p1);
    sensitive << ( s_0_reg_42 );

    SC_METHOD(thread_shl_ln32_fu_93_p2);
    sensitive << ( y_0_reg_53 );

    SC_METHOD(thread_sub_ln32_fu_99_p2);
    sensitive << ( y_fu_87_p2 );
    sensitive << ( shl_ln32_fu_93_p2 );

    SC_METHOD(thread_sub_ln35_fu_137_p2);
    sensitive << ( p_0_reg_65 );
    sensitive << ( b_fu_126_p2 );

    SC_METHOD(thread_tmp_fu_79_p3);
    sensitive << ( s_0_reg_42 );

    SC_METHOD(thread_y_1_fu_111_p2);
    sensitive << ( y_reg_170 );

    SC_METHOD(thread_y_2_fu_143_p3);
    sensitive << ( y_reg_170 );
    sensitive << ( y_1_reg_186 );
    sensitive << ( icmp_ln33_fu_131_p2 );

    SC_METHOD(thread_y_fu_87_p2);
    sensitive << ( y_0_reg_53 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_79_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Cubic_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sext_ln29_fu_75_p1, "sext_ln29_fu_75_p1");
    sc_trace(mVcdFile, sext_ln29_reg_162, "sext_ln29_reg_162");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, y_fu_87_p2, "y_fu_87_p2");
    sc_trace(mVcdFile, y_reg_170, "y_reg_170");
    sc_trace(mVcdFile, tmp_fu_79_p3, "tmp_fu_79_p3");
    sc_trace(mVcdFile, sub_ln32_fu_99_p2, "sub_ln32_fu_99_p2");
    sc_trace(mVcdFile, sub_ln32_reg_176, "sub_ln32_reg_176");
    sc_trace(mVcdFile, s_fu_105_p2, "s_fu_105_p2");
    sc_trace(mVcdFile, s_reg_181, "s_reg_181");
    sc_trace(mVcdFile, y_1_fu_111_p2, "y_1_fu_111_p2");
    sc_trace(mVcdFile, y_1_reg_186, "y_1_reg_186");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, mul_ln32_fu_116_p2, "mul_ln32_fu_116_p2");
    sc_trace(mVcdFile, mul_ln32_reg_191, "mul_ln32_reg_191");
    sc_trace(mVcdFile, y_2_fu_143_p3, "y_2_fu_143_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, select_ln33_fu_149_p3, "select_ln33_fu_149_p3");
    sc_trace(mVcdFile, s_0_reg_42, "s_0_reg_42");
    sc_trace(mVcdFile, y_0_reg_53, "y_0_reg_53");
    sc_trace(mVcdFile, p_0_reg_65, "p_0_reg_65");
    sc_trace(mVcdFile, shl_ln32_fu_93_p2, "shl_ln32_fu_93_p2");
    sc_trace(mVcdFile, or_ln32_1_fu_121_p2, "or_ln32_1_fu_121_p2");
    sc_trace(mVcdFile, b_fu_126_p2, "b_fu_126_p2");
    sc_trace(mVcdFile, icmp_ln33_fu_131_p2, "icmp_ln33_fu_131_p2");
    sc_trace(mVcdFile, sub_ln35_fu_137_p2, "sub_ln35_fu_137_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Cubic.hdltvin.dat");
    mHdltvoutHandle.open("Cubic.hdltvout.dat");
}

Cubic::~Cubic() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void Cubic::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_0_reg_65 = select_ln33_fu_149_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_0_reg_65 = x.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        s_0_reg_42 = s_reg_181.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        s_0_reg_42 = ap_const_lv6_1E;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        y_0_reg_53 = y_2_fu_143_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        y_0_reg_53 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_79_p3.read(), ap_const_lv1_1))) {
        ap_return = y_0_reg_53.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mul_ln32_reg_191 = mul_ln32_fu_116_p2.read();
        y_1_reg_186 = y_1_fu_111_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_79_p3.read(), ap_const_lv1_0))) {
        s_reg_181 = s_fu_105_p2.read();
        sub_ln32_reg_176 = sub_ln32_fu_99_p2.read();
        y_reg_170 = y_fu_87_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sext_ln29_reg_162 = sext_ln29_fu_75_p1.read();
    }
}

void Cubic::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Cubic::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Cubic::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Cubic::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Cubic::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Cubic::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Cubic::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Cubic::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Cubic::thread_b_fu_126_p2() {
    b_fu_126_p2 = (!sext_ln29_reg_162.read().is_01())? sc_lv<32>(): or_ln32_1_fu_121_p2.read() << (unsigned short)sext_ln29_reg_162.read().to_uint();
}

void Cubic::thread_icmp_ln33_fu_131_p2() {
    icmp_ln33_fu_131_p2 = (!p_0_reg_65.read().is_01() || !b_fu_126_p2.read().is_01())? sc_lv<1>(): (sc_biguint<32>(p_0_reg_65.read()) < sc_biguint<32>(b_fu_126_p2.read()));
}

void Cubic::thread_mul_ln32_fu_116_p2() {
    mul_ln32_fu_116_p2 = (!y_1_fu_111_p2.read().is_01() || !sub_ln32_reg_176.read().is_01())? sc_lv<32>(): sc_bigint<32>(y_1_fu_111_p2.read()) * sc_bigint<32>(sub_ln32_reg_176.read());
}

void Cubic::thread_or_ln32_1_fu_121_p2() {
    or_ln32_1_fu_121_p2 = (mul_ln32_reg_191.read() | ap_const_lv32_1);
}

void Cubic::thread_s_fu_105_p2() {
    s_fu_105_p2 = (!ap_const_lv6_3D.is_01() || !s_0_reg_42.read().is_01())? sc_lv<6>(): (sc_bigint<6>(ap_const_lv6_3D) + sc_bigint<6>(s_0_reg_42.read()));
}

void Cubic::thread_select_ln33_fu_149_p3() {
    select_ln33_fu_149_p3 = (!icmp_ln33_fu_131_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln33_fu_131_p2.read()[0].to_bool())? p_0_reg_65.read(): sub_ln35_fu_137_p2.read());
}

void Cubic::thread_sext_ln29_fu_75_p1() {
    sext_ln29_fu_75_p1 = esl_sext<32,6>(s_0_reg_42.read());
}

void Cubic::thread_shl_ln32_fu_93_p2() {
    shl_ln32_fu_93_p2 = (!ap_const_lv32_3.is_01())? sc_lv<32>(): y_0_reg_53.read() << (unsigned short)ap_const_lv32_3.to_uint();
}

void Cubic::thread_sub_ln32_fu_99_p2() {
    sub_ln32_fu_99_p2 = (!shl_ln32_fu_93_p2.read().is_01() || !y_fu_87_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(shl_ln32_fu_93_p2.read()) - sc_biguint<32>(y_fu_87_p2.read()));
}

void Cubic::thread_sub_ln35_fu_137_p2() {
    sub_ln35_fu_137_p2 = (!p_0_reg_65.read().is_01() || !b_fu_126_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_0_reg_65.read()) - sc_biguint<32>(b_fu_126_p2.read()));
}

void Cubic::thread_tmp_fu_79_p3() {
    tmp_fu_79_p3 = s_0_reg_42.read().range(5, 5);
}

void Cubic::thread_y_1_fu_111_p2() {
    y_1_fu_111_p2 = (y_reg_170.read() | ap_const_lv32_1);
}

void Cubic::thread_y_2_fu_143_p3() {
    y_2_fu_143_p3 = (!icmp_ln33_fu_131_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln33_fu_131_p2.read()[0].to_bool())? y_reg_170.read(): y_1_reg_186.read());
}

void Cubic::thread_y_fu_87_p2() {
    y_fu_87_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): y_0_reg_53.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void Cubic::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_79_p3.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void Cubic::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

