-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Cubic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Cubic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Cubic,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=269,HLS_SYN_LUT=421,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln29_fu_75_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln29_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal y_fu_87_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_79_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln32_fu_99_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln32_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_fu_105_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal s_reg_181 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_1_fu_111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln32_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln32_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_fu_143_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln33_fu_149_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_0_reg_42 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_0_reg_53 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_reg_65 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln32_fu_93_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln32_1_fu_121_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_fu_126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln33_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln35_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_0_reg_65_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_0_reg_65 <= select_ln33_fu_149_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_reg_65 <= x;
            end if; 
        end if;
    end process;

    s_0_reg_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                s_0_reg_42 <= s_reg_181;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_0_reg_42 <= ap_const_lv6_1E;
            end if; 
        end if;
    end process;

    y_0_reg_53_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                y_0_reg_53 <= y_2_fu_143_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_0_reg_53 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_79_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ap_return <= y_0_reg_53;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    mul_ln32_reg_191(31 downto 1) <= mul_ln32_fu_116_p2(31 downto 1);
                    y_1_reg_186(31 downto 1) <= y_1_fu_111_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_79_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                s_reg_181 <= s_fu_105_p2;
                    sub_ln32_reg_176(31 downto 1) <= sub_ln32_fu_99_p2(31 downto 1);
                    y_reg_170(31 downto 1) <= y_fu_87_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sext_ln29_reg_162 <= sext_ln29_fu_75_p1;
            end if;
        end if;
    end process;
    y_reg_170(0) <= '0';
    sub_ln32_reg_176(0) <= '0';
    y_1_reg_186(0) <= '1';
    mul_ln32_reg_191(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_79_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_79_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_126_p2 <= std_logic_vector(shift_left(unsigned(or_ln32_1_fu_121_p2),to_integer(unsigned('0' & sext_ln29_reg_162(31-1 downto 0)))));
    icmp_ln33_fu_131_p2 <= "1" when (unsigned(p_0_reg_65) < unsigned(b_fu_126_p2)) else "0";
    mul_ln32_fu_116_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(y_1_fu_111_p2) * signed(sub_ln32_reg_176))), 32));
    or_ln32_1_fu_121_p2 <= (mul_ln32_reg_191 or ap_const_lv32_1);
    s_fu_105_p2 <= std_logic_vector(signed(ap_const_lv6_3D) + signed(s_0_reg_42));
    select_ln33_fu_149_p3 <= 
        p_0_reg_65 when (icmp_ln33_fu_131_p2(0) = '1') else 
        sub_ln35_fu_137_p2;
        sext_ln29_fu_75_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_0_reg_42),32));

    shl_ln32_fu_93_p2 <= std_logic_vector(shift_left(unsigned(y_0_reg_53),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    sub_ln32_fu_99_p2 <= std_logic_vector(unsigned(shl_ln32_fu_93_p2) - unsigned(y_fu_87_p2));
    sub_ln35_fu_137_p2 <= std_logic_vector(unsigned(p_0_reg_65) - unsigned(b_fu_126_p2));
    tmp_fu_79_p3 <= s_0_reg_42(5 downto 5);
    y_1_fu_111_p2 <= (y_reg_170 or ap_const_lv32_1);
    y_2_fu_143_p3 <= 
        y_reg_170 when (icmp_ln33_fu_131_p2(0) = '1') else 
        y_1_reg_186;
    y_fu_87_p2 <= std_logic_vector(shift_left(unsigned(y_0_reg_53),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
end behav;
